package com.xujinshan.leetcode.code0036;

import java.util.HashMap;

/**
 * 0036-有效的数独
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * <p>
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * <p>
 * 数独部分空格内已填入了数字，空白格用'.'表示。
 * <p>
 * 示例 1:
 * <p>
 * 输入:
 * [
 * ["5","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * <p>
 * 示例 2:
 * <p>
 * 输入:
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * <p>
 * 说明:
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 */

class Solution {
    public boolean isValidSudoku(char[][] board) {
        /**
         * 申请空间
         * 每一行(或列，或小九宫格)用一个HashMap存储，
         * 则对于行(或列，或九宫格)使用长度为9的HashMap数组存储
         */
        HashMap<Integer, Integer>[] rows = new HashMap[9];
        HashMap<Integer, Integer>[] columns = new HashMap[9];
        HashMap<Integer, Integer>[] boxes = new HashMap[9];
        /**
         * 创建空间
         */
        for (int i = 0; i < 9; i++) {
            rows[i] = new HashMap<>();
            columns[i] = new HashMap<>();
            boxes[i] = new HashMap<>();
        }
        /**
         * 初始化数据
         */
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                // 获取当前位置的char元素
                char charNumber = board[i][j];
                if (charNumber != '.') {
                    //不是空的情况下，将该数组填入对应的HashMap中
                    int number = (int) charNumber;
                    // 小九宫格对应的序号
                    int box_index = (i / 3) * 3 + j / 3;
                    /**
                     * 添加原则:以当前数字为键，数字出现的次数为值
                     */
                    // 添加进行
                    rows[i].put(number, rows[i].getOrDefault(number, 0) + 1);
                    // 添加进列
                    columns[j].put(number, columns[j].getOrDefault(number, 0) + 1);
                    // 添加进九宫格
                    boxes[box_index].put(number, boxes[box_index].getOrDefault(number, 0) + 1);
                    /**
                     * 如果出现HashMap的值大于1的情况，则不满足条件
                     */
                    if (rows[i].get(number) > 1 || columns[j].get(number) > 1 || boxes[box_index].get(number) > 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}

/**
 * 测试类
 */
public class Study0036 {
    public static void main(String[] args) {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(new Solution().isValidSudoku(board));
    }
}
